#!/bin/bash

# This is a function to modify option in configuration files.
# The syntax is this:
#    write_config "OptionToChange" "Option=NewValue" "ConfigFile" "Delimiter"
#
# It modifies the first commented or uncommented option that matches
# OptionToChange. It then comments all other options matching OptionToChange
# If no options in the specified config file match OptionToChange then the
# Following will be added to the end of the file:
#    # This configuration was generated by GLIS
#    Option=NewValue

write_config() {
# If file exists then check each line of the file for a match
if [ -f $3 ]; then
   found=$(grep "^[ \t]*$1" $3 | head -n 1 | awk -F "$4" '{ print $1 }' | \
      sed 's/[ \t]*//g')
   if [ "$found" == "$1" ]; then
      # We have a match, so find it and replace it.
      instance=0
      while read line; do
         found=$(echo -e "$line" | awk -F "$4" '{ print $1 }')
         if [ "$1" == "$found" ]; then
            instance=`expr $instance + 1`
            if [ $instance -eq 1 ]; then
               echo -e "$2" >> /tmp/list.tmp
            else
               [ "$1" == "$found" ] && echo -e "#$line" >> /tmp/list.tmp
               [ "#$1" == "$found" ] && echo -e "$line" >> /tmp/list.tmp
            fi
         else
            echo -e "$line" >> /tmp/list.tmp
         fi
      done < $3
      mv -f /tmp/list.tmp $3
   else         
      # If the match is not found, then write to the end of the file.
      # Write directly below the header if one already exists.
      headerln=$(grep -n "# This configuration was generated by GLIS" $3 |
	 head -n 1 | awk -F ":" '{print $1}')
      if [ "${headerln}" == "" ]; then
         echo -e "\n# This configuration was generated by GLIS" >> $3
         echo -e "$2" >> $3	 
      else
         # The header already exists, so we need to insert the configuration
         # changes directly below it.
         fileLength=$(cat $3 | wc -l)
         head -n $headerln $3 > /tmp/list.tmp
         echo -e $2 >> /tmp/list.tmp
         tail -n `expr $fileLength - $headerln` $3 >> /tmp/list.tmp
         mv -f /tmp/list.tmp $3
      fi
   fi
else
   echo -e "# This configuration was generated by GLIS" > $3
   echo -e "$2" >> $3
fi
}

# This function sets all of the user specified options for make.conf,
# rc.conf and fstab.
etc_config() {

if [ "$1" == "make.conf" ] || [ "$1" == "rc.conf" ]; then
   while read line ; do
      # Look for lines matching the following:
      # #== /etc/CONF_FILE?
      if [ $(echo ${line} | grep -c "^[ \t]*#==[ \t]*/etc/${1}?") -eq 1 ]; then
         write_config "$(echo ${line} | cut -d "?" -f2 | cut -d "=" -f1)" \
	    "$(echo ${line} | cut -d "?" -f2)" /mnt/gentoo/etc/${1} "="
      fi
   done < ${GLIS_CONFIG}
fi

if [ "$1" == "fstab" ] && [ $(grep -c "/ROOT" /mnt/gentoo/etc/fstab) -gt 0 ]; then
   
   # Get root partition info
   ROOTPART=$(mount | grep "/mnt/gentoo " | cut -d " " -f1)
   if [ "${ROOTPART}" == "" ]; then
      echo "!!! Error #0001: Root partition no mounted at /mnt/gentoo."
      return 1
   fi
   ROOTTYPE=$(mount | grep "/mnt/gentoo " | cut -d " " -f5)

   # Add root partition stuff to fstab
   [ "${ROOTTYPE}" != "reiserfs" ] && write_config "/dev/RO" "${ROOTPART}\t\t/\t\t${ROOTTYPE}\t\tnoatime\t\t\t0 0" /mnt/gentoo/etc/fstab "OT"
   [ "${ROOTTYPE}" == "reiserfs" ] && write_config "/dev/RO" "${ROOTPART}\t\t/\t\t${ROOTTYPE}\tnoatime\t\t\t0 0" /mnt/gentoo/etc/fstab "OT"

   # Search for the easy name for the swap partition
   # And write it to fstab
   SWAPCOUNT=$(grep -c "/dev/" /proc/swaps)
   if [ ${SWAPCOUNT} -gt 0 ]; then
      for (( i=0 ; i < ${SWAPCOUNT} ; i++ )); do
         SWAPPART=$(cat /proc/swaps | grep "/dev/" | head -n $(expr ${i} + 1) | tail -n 1 | cut -d " " -f1)
         for (( ii=1 ; ii <= $(ls /dev/hd* /dev/sd* 2>/dev/null | grep -c dev) ; ii++ )); do
             # Loop through all of our disks in search of swappart
            PARTTEST=$(ls --color=none /dev/hd* /dev/sd* 2>/dev/null | head -n $ii | tail -n 1)
            PARTTESTLINK=$(readlink ${PARTTEST})
            if [ "/dev/${PARTTESTLINK}" == "${SWAPPART}" ]; then
               SWAPPART="${PARTTEST}"
               write_config "/dev/SW" "${SWAPPART}\t\tnone\t\tswap\t\tsw\t\t\t0 0" /mnt/gentoo/etc/fstab "AP"
               break
            fi
         done
      done
   else
      # If there are no swap partitions, remove it from fstab
      cat /mnt/gentoo/etc/fstab | grep -v "/dev/SWAP" > /tmp/fstab.tmp
      mv -f /tmp/fstab.tmp /mnt/gentoo/etc/fstab
   fi   

   # Get boot partition info
   BOOTPART=$(mount | grep "/mnt/gentoo/boot " | cut -d " " -f1)
   BOOTTYPE=$(mount | grep "/mnt/gentoo/boot " | cut -d " " -f5)
   
   # If boot exists, add it to fstab
   if [ "${BOOTPART}" != "" ]; then
      [ "${BOOTTYPE}" != "reiserfs" ] && write_config "/dev/BO" "${BOOTPART}\t\t/boot\t\t${BOOTTYPE}\t\tnoauto,noatime\t\t1 1" /mnt/gentoo/etc/fstab "OT"
      [ "${BOOTTYPE}" == "reiserfs" ] && write_config "/dev/BO" "${BOOTPART}\t\t/boot\t\t${BOOTTYPE}\tnoauto,noatime,notail\t1 1" /mnt/gentoo/etc/fstab "OT"
   else
      # No boot partition exists, so remove it from fstab
      cat /mnt/gentoo/etc/fstab | grep -v "/dev/BOOT" > /tmp/fstab.tmp
      mv -f /tmp/fstab.tmp /mnt/gentoo/etc/fstab
   fi
   
   # This routine accounts for any other, non-nfs, mountpoints
   OTHERCOUNT=$(mount | grep "/mnt/gentoo" | grep -v "/mnt/gentoo/boot " | grep -v "/mnt/gentoo " | grep -c "/dev/")
   if [ ${OTHERCOUNT} -gt 0 ]; then
      for (( i=0 ; i < ${OTHERCOUNT} ; i++ )); do
         PART="$(mount | grep "/mnt/gentoo" | grep -v "/mnt/gentoo/boot " | grep -v "/mnt/gentoo " | grep "/dev/" | head -n $(expr ${i} + 1) | tail -n 1 | cut -d " " -f1)"
         TYPE="$(mount | grep "/mnt/gentoo" | grep -v "/mnt/gentoo/boot " | grep -v "/mnt/gentoo " | grep "/dev/" | head -n $(expr ${i} + 1) | tail -n 1 | cut -d " " -f5)"
         MOUNT="$(mount | grep "/mnt/gentoo" | grep -v "/mnt/gentoo/boot " | grep -v "/mnt/gentoo " | grep "/dev/" | head -n $(expr ${i} + 1) | tail -n 1 | cut -d " " -f3 | sed "s/\/mnt\/gentoo\(.*\)/\1/")"
         [ "${TYPE}" != "reiserfs" ] && write_config "/dev/PA" "${PART}\t\t${MOUNT}\t\t${TYPE}\t\tnoatime\t\t0 0" /mnt/gentoo/etc/fstab "RT"
         [ "${TYPE}" == "reiserfs" ] && write_config "/dev/PA" "${PART}\t\t${MOUNT}\t\t${TYPE}\tnoatime\t\t0 0" /mnt/gentoo/etc/fstab "RT"
      done
   fi

   # Add all NFS mounts to fstab
   NFSCOUNT=$(mount | grep "/mnt/gentoo" | grep -v "/mnt/gentoo/boot " | grep -v "/mnt/gentoo " | cut -d ' ' -f1 | grep -c ":")
   if [ ${NFSCOUNT} -gt 0 ]; then
      for (( i=0; i < ${NFSCOUNT}; i++ )); do
         line="$(mount | grep "/mnt/gentoo" | grep -v "/mnt/gentoo/boot " | grep -v "/mnt/gentoo " | grep ":" | head -n $(expr ${i} + 1) | tail -n 1)"
         PART="$(echo $line | cut -d " " -f1)"
	 TYPE="nfs"
	 MOUNT="$(echo $line |cut -d " " -f3 |sed "s/\/mnt\/gentoo\(.*\)/\1/")"
	 OPTS="$(echo $line | cut -d " " -f6 | sed -e "s/^(\(.*\))$/\1/")"
	 # Remove the "addr=xxx.xxx.xxx.xxx" option. I believe this will
	 # always be at the end of the list of nfs options.
	 OPTS="$(echo $OPTS | awk -F "addr=" '{print $1}' | sed "s/,$//")"

	 write_config "/dev/PA" "${PART}\t\t${MOUNT}\t\t${TYPE}\t\t${OPTS}\t\t0 0" /mnt/gentoo/etc/fstab "RT"
      done
   fi
fi

return 0
}
